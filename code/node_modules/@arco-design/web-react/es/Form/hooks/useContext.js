var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useContext, useEffect, useState, useCallback } from 'react';
import { FormContext } from '../context';
import warn from '../../_util/warning';
var useFormContext = function () {
    var formCtx = useContext(FormContext);
    var formInstance = formCtx.store;
    var _a = __read(useState(false), 2), isSubmitting = _a[0], setIsSubmitting = _a[1];
    var setSubmitting = useCallback(function () {
        var _a;
        var state = formInstance === null || formInstance === void 0 ? void 0 : formInstance.getFieldsState();
        var newValue = (_a = state[Object.keys(state)[0]]) === null || _a === void 0 ? void 0 : _a.isSubmitting;
        setIsSubmitting(newValue);
    }, []);
    useEffect(function () {
        if (!formInstance) {
            warn(true, 'formInstance is not available');
            return;
        }
        var registerStateWatcher = (formInstance === null || formInstance === void 0 ? void 0 : formInstance.getInnerMethods(true)).registerStateWatcher;
        var update = function () { return setSubmitting(); };
        update();
        var cancelWatch = registerStateWatcher && registerStateWatcher(update);
        return function () {
            cancelWatch && cancelWatch();
        };
    }, []);
    return {
        form: formInstance,
        disabled: formCtx.disabled,
        isSubmitting: isSubmitting,
    };
};
export default useFormContext;
