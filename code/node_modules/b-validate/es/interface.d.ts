import ValidateMessages from './message';
export declare type ValidateMessagesTemplateType = typeof ValidateMessages;
export declare type ValidateMessagesType = Partial<{
    [key in keyof ValidateMessagesTemplateType]: ValidateMessagesTemplateType[key] extends string ? ValidateMessagesTemplateType[key] : Record<keyof ValidateMessagesTemplateType[key], (info: any) => any | string>;
}>;
export declare type RuleType = 'string' | 'number' | 'boolean' | 'array' | 'object' | 'url' | 'email' | 'ip' | 'type' | 'custom';
export declare type ValidateOptions = {
    strict?: boolean;
    trim?: boolean;
    ignoreEmptyString?: boolean;
    message?: any;
    type?: RuleType;
    validateMessages?: ValidateMessagesType;
};
export declare type InnerValidateOptions = ValidateOptions & {
    field?: string;
};
export declare type CustomValidatorType = (value: any, callback: (message?: any) => void) => Promise<void> | void;
export declare type SchemaRuleType = {
    required?: boolean;
    message?: any;
    validator?: CustomValidatorType;
    type?: RuleType;
    true?: boolean;
    false?: boolean;
    deepEqual?: any;
    hasKeys?: string[];
    empty?: boolean;
    includes?: any;
    maxLength?: number;
    minLength?: number;
    pattern?: RegExp;
    length?: number;
    uppercase?: boolean;
    lowercase?: boolean;
    min?: number;
    max?: number;
    equal?: number;
    positive?: boolean;
    negative?: boolean;
};
export declare type SchemaType = {
    [key: string]: SchemaRuleType[];
};
export declare type ValidatorError = {
    value: any;
    type: ValidateOptions['type'];
    requiredError?: boolean;
    message?: any;
};
